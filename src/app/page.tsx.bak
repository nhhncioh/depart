"use client";

import { useMemo, useState } from "react";
import { Card, CardBody, CardHeader, Button, Kpi, Badge, Meter } from "@/components/ui";

type FlightType = "domestic" | "international";

function fmt(dtISO?: string) {
  if (!dtISO) return "—";
  const d = new Date(dtISO);
  return d.toLocaleString([], { month: "short", day: "numeric", hour: "2-digit", minute: "2-digit" });
}
function timeOnly(dtISO?: string) {
  if (!dtISO) return "—";
  const d = new Date(dtISO);
  return d.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
}

export default function Page() {
  // Form state
  const [airport, setAirport] = useState("YYZ");
  const [airline, setAirline] = useState("Air Canada");
  const [flightType, setFlightType] = useState<FlightType>("domestic");
  const [depTimeLocalISO, setDepTimeLocalISO] = useState<string>(() => {
    const d = new Date();
    d.setHours(d.getHours() + 24);
    d.setMinutes(0,0,0);
    return new Date(d.getTime() - d.getTimezoneOffset()*60000).toISOString().slice(0,16);
  });
  const [checkedBags, setCheckedBags] = useState(true);
  const [trustedTraveler, setTrustedTraveler] = useState(false);
  const [arrivalMethod, setArrivalMethod] = useState<"rideshare" | "self-park" | "dropoff">("dropoff");
  const [securityOverride, setSecurityOverride] = useState<string>("");

  // Results
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);

  const meta = result?.meta ?? {};
  const busyness = Number(meta?.busynessPercent ?? 0);

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setResult(null);

    const payload = {
      airport,
      airline,
      flightType,
      depTimeLocalISO: new Date(depTimeLocalISO).toISOString(),
      options: { checkedBags, trustedTraveler, rideType: arrivalMethod },
      securityOverrideMinutes: securityOverride ? Number(securityOverride) : undefined,
    } as any;

    try {
      const res = await fetch("/api/recommend", { method: "POST", body: JSON.stringify(payload) });
      const json = await res.json();
      if (!res.ok) throw new Error(json?.error || "Request failed");
      setResult(json);
    } catch (err: any) {
      setError(err?.message ?? "Something went wrong");
    } finally {
      setLoading(false);
    }
  }

  function copy(text: string) {
    navigator.clipboard.writeText(text).catch(()=>{});
  }

  function addToCalendar() {
    if (!result?.arriveAirportLocalISO) return;
    const start = new Date(result.arriveAirportLocalISO);
    const end = new Date(start.getTime() + 45*60*1000);
    function icalDate(d: Date) {
      const y = d.getFullYear();
      const m = String(d.getMonth()+1).padStart(2,"0");
      const da = String(d.getDate()).padStart(2,"0");
      const hh = String(d.getHours()).padStart(2,"0");
      const mm = String(d.getMinutes()).padStart(2,"0");
      const ss = String(d.getSeconds()).padStart(2,"0");
      return `${y}${m}${da}T${hh}${mm}${ss}`;
    }
    const ics = [
      "BEGIN:VCALENDAR",
      "VERSION:2.0",
      "PRODID:-//Depart//EN",
      "BEGIN:VEVENT",
      `UID:${crypto.randomUUID()}`,
      `DTSTAMP:${icalDate(new Date())}`,
      `DTSTART:${icalDate(start)}`,
      `DTEND:${icalDate(end)}`,
      `SUMMARY:Arrive at ${airport} (Depart)`,
      `DESCRIPTION:Recommended arrive-by time for ${airline}.`,
      "END:VEVENT",
      "END:VCALENDAR",
    ].join("\r\n");
    const blob = new Blob([ics], { type: "text/calendar;charset=utf-8" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `arrive-by-${airport}.ics`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  // Security source badging
  const secSource = meta?.securitySource as string | undefined;
  const secBadge =
    secSource === "catsa" ? <Badge tone="good">CATSA live</Badge> :
    secSource === "tsa" ? <Badge tone="good">MyTSA live</Badge> :
    secSource === "override" ? <Badge tone="info">Manual</Badge> :
    <Badge>Estimate</Badge>;

  // Hero + layout
  return (
    <main className="min-h-screen bg-gradient-to-br from-indigo-700 via-indigo-800 to-violet-900">
      <div className="container mx-auto max-w-6xl px-5 py-10">
        {/* Header */}
        <div className="mb-8 text-white">
          <div className="flex items-center justify-between">
            <h1 className="text-3xl font-semibold tracking-tight">Depart</h1>
            <div className="text-sm opacity-80">Arrive right — no stress, no missed flights.</div>
          </div>
        </div>

        {/* Content */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Form card */}
          <Card>
            <CardHeader title="Trip details" subtitle="A minimal set for a precise time." />
            <CardBody>
              <form className="grid grid-cols-1 md:grid-cols-2 gap-4" onSubmit={handleSubmit}>
                <label className="block col-span-1">
                  <span className="text-xs text-gray-600">Airport (IATA)</span>
                  <input value={airport} onChange={(e)=>setAirport(e.target.value.toUpperCase())} placeholder="YYZ" />
                </label>
                <label className="block col-span-1">
                  <span className="text-xs text-gray-600">Airline</span>
                  <input value={airline} onChange={(e)=>setAirline(e.target.value)} placeholder="Airline" />
                </label>

                <label className="block">
                  <span className="text-xs text-gray-600">Flight type</span>
                  <select value={flightType} onChange={(e)=>setFlightType(e.target.value as FlightType)}>
                    <option value="domestic">Domestic</option>
                    <option value="international">International</option>
                  </select>
                </label>

                <label className="block">
                  <span className="text-xs text-gray-600">Departure (local)</span>
                  <input type="datetime-local" value={depTimeLocalISO} onChange={(e)=>setDepTimeLocalISO(e.target.value)} />
                </label>

                <div className="col-span-1 md:col-span-2 grid grid-cols-2 gap-4">
                  <label className="flex items-center gap-2">
                    <input type="checkbox" checked={checkedBags} onChange={(e)=>setCheckedBags(e.target.checked)} />
                    <span>Checked bags</span>
                  </label>
                  <label className="flex items-center gap-2">
                    <input type="checkbox" checked={trustedTraveler} onChange={(e)=>setTrustedTraveler(e.target.checked)} />
                    <span>NEXUS/PreCheck</span>
                  </label>
                </div>

                <label className="block">
                  <span className="text-xs text-gray-600">Arrival method</span>
                  <select value={arrivalMethod} onChange={(e)=>setArrivalMethod(e.target.value as any)}>
                    <option value="dropoff">Drop-off</option>
                    <option value="rideshare">Rideshare</option>
                    <option value="self-park">Self-park</option>
                  </select>
                </label>

                <label className="block">
                  <span className="text-xs text-gray-600">Security wait override (min) — optional</span>
                  <input placeholder="e.g., 25" value={securityOverride}
                         onChange={(e)=>setSecurityOverride(e.target.value.replace(/[^0-9]/g,''))}/>
                </label>

                <div className="col-span-1 md:col-span-2 flex items-center gap-3 pt-2">
                  <Button type="submit" variant="primary" disabled={loading}>
                    {loading ? "Computing…" : "Get arrive-by time"}
                  </Button>
                  {error ? <span className="text-sm text-red-600">{error}</span> : null}
                </div>
              </form>
            </CardBody>
          </Card>

          {/* Results column */}
          <div className="space-y-6">
            <Card>
              <CardHeader title="Arrive at airport by" subtitle="Your precise time, with safety built in." />
              <CardBody>
                {result ? (
                  <>
                    <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
                      <Kpi label="Normal" value={timeOnly(result.bands?.normalLeaveLocalISO ?? result.arriveAirportLocalISO)} sub={fmt(result.bands?.normalLeaveLocalISO ?? result.arriveAirportLocalISO)} />
                      <Kpi label="Aggressive" value={timeOnly(result.bands?.aggressiveLeaveLocalISO)} sub={fmt(result.bands?.aggressiveLeaveLocalISO)} />
                      <Kpi label="Cautious" value={timeOnly(result.bands?.cautiousLeaveLocalISO)} sub={fmt(result.bands?.cautiousLeaveLocalISO)} />
                    </div>

                    <div className="mt-4 flex items-center gap-3">
                      <Button variant="secondary" onClick={()=>copy(fmt(result.bands?.normalLeaveLocalISO ?? result.arriveAirportLocalISO))}>Copy</Button>
                      <Button variant="secondary" onClick={addToCalendar}>Add to calendar</Button>
                      <div className="text-xs text-gray-500">Security: <span className="font-medium">{result?.breakdown?.securityWaitMin ?? "—"}m</span> {secBadge}</div>
                    </div>
                  </>
                ) : (
                  <div className="text-sm text-gray-600">Fill the trip details and click <span className="font-medium">Get arrive-by time</span>.</div>
                )}
              </CardBody>
            </Card>

            <Card>
              <CardHeader title="Confidence & busyness" />
              <CardBody>
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
                  <div>
                    <div className="text-xs text-gray-500 mb-1">Expected busyness</div>
                    <Meter percent={(busyness ?? 0)} />
                    <div className="text-xs text-gray-500 mt-1">{busyness !== null ? (busyness + "% of typical capacity") : "— no schedule data"}</div>
                  </div>
                  <div className="sm:col-span-2 grid grid-cols-2 gap-3">
                    <Kpi label="Gate close lead" value={<>{result?.breakdown?.gateCloseLeadMin ?? "—"}m</>} />
                    <Kpi label="Arrival buffer" value={<>{result?.breakdown?.arrivalBufferMin ?? "—"}m</>} />
                  </div>
                </div>
              </CardBody>
            </Card>

            {result && (
              <Card>
                <CardHeader title="Why this time" subtitle="A quick breakdown of the factors." />
                <CardBody>
                  <ul className="text-sm text-gray-700 space-y-2 list-disc pl-5">
                    <li>Security wait: {result.breakdown?.securityWaitMin ?? "—"} min {secBadge}</li>
                    <li>Walk & misc: {result.breakdown?.walkBufferMin ?? "—"} + {result.breakdown?.airportMiscBufferMin ?? "—"} min</li>
                    {result.breakdown?.bagDropCutoffMin !== undefined && (
                      <li>Checked bag cutoff + process: {result.breakdown.bagDropCutoffMin} + {result.breakdown.bagDropProcessMin ?? 0} min</li>
                    )}
                    <li>Policy floor: {flightType === "international" ? "120m" : "75m"} (we never recommend less)</li>
                  </ul>
                </CardBody>
              </Card>
            )}
          </div>
        </div>
      </div>
    </main>
  );
}

