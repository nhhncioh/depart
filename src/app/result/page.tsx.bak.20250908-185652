"use client";
import "./styles.css";
import React, { useMemo, useState } from "react";
import Link from "next/link";
import { useSearchParams } from "next/navigation";/** ---------- tiny helpers (safe, self-contained) ---------- */

function fmtTimeISOStable(iso?: string | null, timeZone?: string) {
  if (!iso) return "";
  const d = new Date(iso);

  const opts: Intl.DateTimeFormatOptions = {
    hour: "2-digit",
    minute: "2-digit",
    hour12: true
  };
  if (timeZone) (opts as any).timeZone = timeZone;

  const parts = new Intl.DateTimeFormat("en-US", opts).formatToParts(d);
  const get = (t: any) => parts.find(p => p.type === t)?.value ?? "";

  const hour = String(get("hour")).padStart(2, "0");
  const minute = String(get("minute")).padStart(2, "0");
  const ap = String(get("dayPeriod") || "").toUpperCase();

  return `${hour}:${minute} ${ap}`;
}

function parseDataParam(param: string | null) {
  if (!param) return null;

  const tryJSON = (s: string) => { try { return JSON.parse(s); } catch { return null; } };

  // Try Base64URL → JSON
  try {
    const b64 = param.replace(/-/g, '+').replace(/_/g, '/');
    const padded = b64 + '='.repeat((4 - (b64.length % 4)) % 4);
    const bin = typeof atob === 'function' ? atob(padded) : Buffer.from(padded, 'base64').toString('binary');
    const bytes = Uint8Array.from(bin, c => c.charCodeAt(0));
    const json = new TextDecoder().decode(bytes);
    const o = tryJSON(json);
    if (o) return o;
  } catch {}

  // Try URI decoding once/twice → JSON
  try {
    const once = decodeURIComponent(param);
    const o1 = tryJSON(once);
    if (o1) return o1;
    const twice = decodeURIComponent(once);
    const o2 = tryJSON(twice);
    if (o2) return o2;
  } catch {}

  // Fallback: direct JSON
  return tryJSON(param);
}
function generateComfortLevels(result: any) {
  const fmt = (iso?: string | null) => iso ? fmtTimeISO(iso) : "—";

  const riskyISO    = result?.bands?.aggressiveLeaveLocalISO ?? result?.leaveByLocalISO ?? null;
  const moderateISO = result?.bands?.normalLeaveLocalISO     ?? result?.leaveByLocalISO ?? null;
  const cautiousISO = result?.bands?.cautiousLeaveLocalISO   ?? result?.leaveByLocalISO ?? null;

  return {
    risky:    { time: fmt(riskyISO),    description: "Tight window; best for light travelers or PreCheck." },
    moderate: { time: fmt(moderateISO), description: "Balanced timing for most travelers." },
    cautious: { time: fmt(cautiousISO), description: "Extra buffer for peace of mind and unexpected delays." },
    _iso: { riskyISO, moderateISO, cautiousISO }
  };
}
function generateAnalysis(result: any) {
  const bd = result?.breakdown ?? {};
  const n = (v: any, d: number) => (typeof v === "number" && isFinite(v) ? v : d);

  const items = [
    { factor: "Check-in / bag-drop", time: n(bd.checkInMin ?? bd.gateCloseLeadMin, 30), reason: "Airline counters & baggage drop at this hour." },
    { factor: "Security screening",  time: n(bd.securityWaitMin, 15),                  reason: result?.meta?.securityDetail ?? "Typical security wait for this timeslot." },
    { factor: "Walk to gate",         time: n(bd.walkBufferMin, 12),                    reason: "Distance and terminal layout." },
    { factor: "Contingency",          time: n(bd.contingencyMin ?? bd.airportMiscBufferMin, 8), reason: "Buffer for minor slowdowns." },
  ];

  const windowMinutes = Math.round(((result?.meta?.horizonHours ?? 1.5) * 60));
  const count = (typeof result?.meta?.business?.count === "number") ? result.meta.business.count : null;

  return {
    activityLevel: (result?.meta?.business?.score ?? null) ? "Moderate" : "Typical",
    departuresInWindow: count,
    windowMinutes,
    departureContext: result?.meta?.securityDetail ?? "Based on schedule load and typical patterns.",
    extendedContext: result?.meta?.securitySource ? `Source: ${result.meta.securitySource}` : null,
    breakdown: items,
  };
}
function fmtTimeISO(iso?: string | null) {
  if (!iso) return "—";
  const d = new Date(iso);
  if (Number.isNaN(d.getTime())) return "—";
  return new Intl.DateTimeFormat(undefined, {
    hour: "numeric", minute: "2-digit", hour12: true
  }).format(d);
}


function fmtDateTimeISO(iso?: string | null) {
  if (!iso) return "—";
  const d = new Date(iso);
  if (Number.isNaN(d.getTime())) return "—";
  return new Intl.DateTimeFormat(undefined, {
    weekday: "short", month: "short", day: "numeric",
    hour: "numeric", minute: "2-digit", hour12: true
  }).format(d);
}


function bufferTextFor(_: string | null) {
  return "Includes check-in, security, walk, and contingency.";
}




export default function ResultPage() {
  const sp = useSearchParams();
  const [showRaw, setShowRaw] = useState(false);

  const result = useMemo(() => parseDataParam(sp.get("data")), [sp]);

  const headerISO  = result?.departureLocalISO || result?.departLocalISO || result?.leaveByLocalISO || null;
  const heroISO    = result?.leaveByLocalISO || result?.bands?.aggressiveLeaveLocalISO || result?.arriveByLocalISO || headerISO;
  const timeline   = (result?.timeline as any) || {};
  const traffic    = (result?.traffic as any) || {};
  const routeType  = result?.routeType || (result?.explanation?.isInternational ? "International" : "Domestic");
  const overall    = result?.overall || null;
  const confidence = result?.confidence || { level: "Medium" };
  const changed    = result?.changed || null;
  const depISO     = result?.departureLocalISO || null;

  const comfortLevels = useMemo(() => generateComfortLevels(result || {}), [result]);
  const analysis      = useMemo(() => generateAnalysis(result || {}), [result]);
  const buffers       = "Includes check-in, security, walk, and contingency.";

  if (!result) {
    return (
      <main className="app-shell">
        <div className="container">
          <div className="card card-lg">
            <div className="card-inner" style={{ textAlign: "center" }}>
              <h1 suppressHydrationWarning data-hero-title>{fmtTimeISOStable(headerISO) ?? "See details"}</h1>
              <p className="sub">Let&apos;s try that again.</p>
              <div className="footer-row" style={{ justifyContent: "center" }}>
                <Link className="btn" href="/">Start over</Link>
              </div>
            </div>
          </div>
        </div>
      </main>
    );
  }

  return (
    <main className="app-shell">
      <div className="container">
        <div className="header">
          <div className="brand">
            <svg width="22" height="22" viewBox="0 0 24 24" fill="none" aria-hidden>
              <path d="M3 12h18M3 12c6-4 12-4 18 0M3 12c6 4 12 4 18 0" stroke="url(#g)" strokeWidth="1.6" strokeLinecap="round"/>
              <defs>
                <linearGradient id="g" x1="3" y1="12" x2="21" y2="12" gradientUnits="userSpaceOnUse">
                  <stop stopColor="#6ee7ff"/><stop offset="1" stopColor="#a78bfa"/>
                </linearGradient>
              </defs>
            </svg>
            <div>depart</div>
          </div>
          <div className="badge">results</div>
        </div>

        <div className="grid">
          <section className="card card-lg">
            <div className="card-inner">
              <div className="kicker">Suggested arrival</div>
              {(result?.airport || result?.departureLocalISO) && (
                <div className="help" style={{ marginTop: 4 }} suppressHydrationWarning>
                  {result?.airport}
                  {result?.airport && result?.departureLocalISO ? " · " : ""}
                  {fmtDateTimeISO(result?.departureLocalISO)}
                </div>
              )}

              <div className="time-big" suppressHydrationWarning>{fmtTimeISOStable(heroISO) ?? "See details"}</div>
              <p className="help" style={{ marginTop: 8 }} suppressHydrationWarning>{buffers}</p>

              <div className="row" style={{ justifyContent: "space-between", marginTop: 8, flexWrap: "wrap" }}>
                <div className="row" style={{ gap: 8 }}>
                  {overall && <div className="chip" suppressHydrationWarning>Overall: <strong>{overall}</strong></div>}
                  {confidence?.level && <div className="chip" suppressHydrationWarning>Confidence: <strong>{confidence.level}</strong></div>}
                  <div className="chip" suppressHydrationWarning>{routeType} flight</div>
                </div>
                {changed?.minutes ? (
                  <div className={"chip " + (changed.direction === "later" ? "bad" : "good")} suppressHydrationWarning>
                    {changed.direction === "later" ? "Later by" : "Earlier by"} {changed.minutes} min
                  </div>
                ) : null}
              </div>

              <div className="footer-row">
                <button className="btn btn-secondary" onClick={() => setShowRaw(v => !v)}>
                  {showRaw ? "Hide raw output" : "View raw output"}
                </button>
                <Link className="btn" href="/">Plan another flight</Link>
              </div>
            </div>
          </section>

          {/* Comfort Level Cards */}
          {comfortLevels && (
            <section className="grid grid-3">
              <div className="card">
                <div className="card-inner">
                  <div className="kicker" style={{ color: "#ff6b6b" }}>Risky</div>
                  <div className="time-big" suppressHydrationWarning style={{ fontSize: "32px" }}>{comfortLevels.risky.time}</div>
                  <p className="help" style={{ marginTop: 4 }} suppressHydrationWarning>{bufferTextFor(heroISO)}</p>
                  <p className="help" style={{ fontSize: "12px", marginTop: 8 }}>{comfortLevels.risky.description}</p>
                </div>
              </div>
              <div className="card" style={{ border: "2px solid var(--accent)" }}>
                <div className="card-inner">
                  <div className="kicker" style={{ color: "var(--accent)" }}>Moderate</div>
                  <div className="time-big" suppressHydrationWarning style={{ fontSize: "32px" }}>{comfortLevels.moderate.time}</div>
                  <p className="help" style={{ marginTop: 4 }} suppressHydrationWarning>{bufferTextFor(heroISO)}</p>
                  <p className="help" style={{ fontSize: "12px", marginTop: 8 }}>{comfortLevels.moderate.description}</p>
                </div>
              </div>
              <div className="card">
                <div className="card-inner">
                  <div className="kicker" style={{ color: "#51cf66" }}>Cautious</div>
                  <div className="time-big" suppressHydrationWarning style={{ fontSize: "32px" }}>{comfortLevels.cautious.time}</div>
                  <p className="help" style={{ marginTop: 4 }} suppressHydrationWarning>{bufferTextFor(heroISO)}</p>
                  <p className="help" style={{ fontSize: "12px", marginTop: 8 }}>{comfortLevels.cautious.description}</p>
                </div>
              </div>
            </section>
          )}

          {/* Analysis */}
          {analysis && (
            <section className="card">
              <div className="card-inner">
                <div className="kicker">Detailed Analysis</div>
                <h3 style={{ margin: "6px 0 16px", fontSize: "18px" }}>Why This Timing</h3>

                <div style={{
                  background: "rgba(110,231,255,0.1)",
                  border: "1px solid rgba(110,231,255,0.2)",
                  borderRadius: "12px",
                  padding: "16px",
                  marginBottom: "16px"
                }}>
                  <div className="row" style={{ justifyContent: "space-between", alignItems: "flex-start", marginBottom: "8px" }}>
                    <div>
                      <div style={{ color: "var(--accent)", fontWeight: 600, fontSize: "14px" }}>Airport Activity</div>
                      <div style={{ color: "var(--text)", fontWeight: 700, fontSize: "16px" }}>{analysis.activityLevel}</div>
                    </div>
                    {analysis.departuresInWindow !== null && (
                      <div style={{ textAlign: "right" }}>
                        <div style={{ color: "var(--accent)", fontWeight: 600, fontSize: "24px" }}>{analysis.departuresInWindow}</div>
                        <div style={{ color: "var(--muted)", fontSize: "12px" }}>flights in ±{analysis.windowMinutes} min</div>
                      </div>
                    )}
                  </div>
                  <p className="help" style={{ marginBottom: analysis.extendedContext ? "8px" : "0" }} suppressHydrationWarning>
                    {analysis.departureContext}
                  </p>
                  {analysis.extendedContext && (
                    <p className="help" style={{ fontSize: "12px", color: "var(--accent)", margin: 0 }} suppressHydrationWarning>
                      {analysis.extendedContext}
                    </p>
                  )}
                </div>

                <div className="grid grid-2" style={{ gap: "12px" }}>
                  {analysis.breakdown.map((item: any, i: number) => (
                    <div key={i} style={{
                      background: "rgba(255,255,255,0.04)",
                      border: "1px solid rgba(255,255,255,0.08)",
                      borderRadius: "12px",
                      padding: "14px"
                    }}>
                      <div className="row" style={{ justifyContent: "space-between", marginBottom: "6px" }}>
                        <span style={{ fontWeight: 600, fontSize: "14px" }}>{item.factor}</span>
                        <span style={{ color: "var(--accent)", fontWeight: 600 }}>{item.time} min</span>
                      </div>
                      <p className="help" style={{ fontSize: "12px", margin: 0 }}>{item.reason}</p>
                    </div>
                  ))}
                </div>
              </div>
            </section>
          )}

          <section className="grid grid-2">
            <div className="card">
              <div className="card-inner">
                <div className="kicker">Your flight</div>
                <h3 style={{ margin: "6px 0 10px", fontSize: "18px" }}>Departure</h3>
                <p className="help" suppressHydrationWarning>{traffic?.reason ?? "Based on typical patterns at this hour."}</p>

                <div className="divider"></div>
                <div className="kicker">Why this time</div>
                <ul style={{ margin: "10px 0", paddingLeft: "18px", color: "var(--muted)" }}>
                  <li>Check-in / bag-drop: <strong suppressHydrationWarning>{analysis.breakdown[0]?.time ?? "—"} min</strong></li>
                  <li>Security screening:  <strong suppressHydrationWarning>{analysis.breakdown[1]?.time ?? "—"} min</strong></li>
                  <li>Walk to gate:        <strong suppressHydrationWarning>{analysis.breakdown[2]?.time ?? "—"} min</strong></li>
                  <li>Contingency:         <strong suppressHydrationWarning>{analysis.breakdown[3]?.time ?? "—"} min</strong></li>
                </ul>
                {result?.explanation?.contingencyReason && (
                  <p className="help" style={{ marginTop: -6 }} suppressHydrationWarning>
                    Why contingency? {result.explanation.contingencyReason}
                  </p>
                )}
                {Array.isArray(result?.explanation?.notes) && result.explanation.notes.length > 0 && (
                  <>
                    <div className="kicker" style={{ marginTop: 12 }}>Notes</div>
                    <ul style={{ margin: "10px 0", paddingLeft: "18px", color: "var(--muted)" }}>
                      {result.explanation.notes.map((n: string, i: number) => <li key={i}>{n}</li>)}
                    </ul>
                  </>
                )}
              </div>
            </div>

            <div className="card">
              <div className="card-inner">
                <div className="kicker">Security & traffic</div>
                <h3 style={{ margin: "6px 0 10px", fontSize: "18px" }}>
                  <span suppressHydrationWarning>{result?.security ?? "Security"}</span>
                  <span style={{ opacity: .5 }}> · </span>
                  <span suppressHydrationWarning>Terminal traffic: {traffic?.level ?? "—"}</span>
                </h3>
                <p className="help" suppressHydrationWarning>{traffic?.reason ?? "Based on typical patterns at this hour."}</p>

                <div className="divider"></div>
                <div className="kicker">Timeline</div>
                <div className="timeline" style={{ marginTop: 8 }}>
                  <div className="item" suppressHydrationWarning><span className="dot"></span> Arrive: <strong suppressHydrationWarning>{fmtTimeISOStable(timeline?.arriveByISO)}</strong></div>
                  <div className="item" suppressHydrationWarning><span className="dot"></span> Check-in done: <strong suppressHydrationWarning>{fmtTimeISOStable(timeline?.checkInDoneISO)}</strong></div>
                  <div className="item" suppressHydrationWarning><span className="dot"></span> Security done: <strong suppressHydrationWarning>{fmtTimeISOStable(timeline?.securityDoneISO)}</strong></div>
                  <div className="item" suppressHydrationWarning><span className="dot"></span> At gate by: <strong suppressHydrationWarning>{fmtTimeISOStable(timeline?.gateByISO)}</strong></div>
                  <div className="item" suppressHydrationWarning><span className="dot"></span> Departure: <strong suppressHydrationWarning>{fmtTimeISOStable(depISO)}</strong></div>
                </div>
              </div>
            </div>
          </section>

          {showRaw && (
            <section className="card">
              <div className="card-inner">
                <div className="kicker">Raw output</div>
                <pre className="code">{JSON.stringify(result, null, 2)}</pre>
              </div>
            </section>
          )}
        </div>
      </div>
    </main>
  );
}















