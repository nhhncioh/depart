"use client";
import "./styles.css";
import React, { useMemo, useState } from "react";
import Link from "next/link";
import { useSearchParams } from "next/navigation";/** ---------- tiny helpers (safe, self-contained) ---------- */

function fmtTimeISO(iso?: string | null, timeZone?: string) { return fmtTimeISOStable(iso, timeZone); }

function fmtTimeISOStable(iso?: string | null, timeZone?: string) {
  if (!iso) return "";
  const d = new Date(iso);

  const opts: Intl.DateTimeFormatOptions = {
    hour: "2-digit",
    minute: "2-digit",
    hour12: true
  };
  if (timeZone) (opts as any).timeZone = timeZone;

  const parts = new Intl.DateTimeFormat("en-US", opts).formatToParts(d);
  const get = (t: any) => parts.find(p => p.type === t)?.value ?? "\u2014";

  const hour = String(get("hour")).padStart(2, "0");
  const minute = String(get("minute")).padStart(2, "0");
  const ap = String(get("dayPeriod") || "").toUpperCase();

  return `${hour}:${minute} ${ap}`;
}

function parseDataParam(param: string | null) {
  if (!param) return null;

  const tryJSON = (s: string) => { try { return JSON.parse(s); } catch { return null; } };

  // Try Base64URL -> JSON
  try {
    const b64 = param.replace(/-/g, '+').replace(/_/g, '/');
    const padded = b64 + '='.repeat((4 - (b64.length % 4)) % 4);
    const bin = typeof atob === 'function' ? atob(padded) : Buffer.from(padded, 'base64').toString('binary');
    const bytes = Uint8Array.from(bin, c => c.charCodeAt(0));
    const json = new TextDecoder().decode(bytes);
    const o = tryJSON(json);
    if (o) return o;
  } catch {}

  // Try URI decoding once/twice -> JSON
  try {
    const once = decodeURIComponent(param);
    const o1 = tryJSON(once);
    if (o1) return o1;
    const twice = decodeURIComponent(once);
    const o2 = tryJSON(twice);
    if (o2) return o2;
  } catch {}

  // Fallback: direct JSON
  return tryJSON(param);
}
function generateComfortLevels(result: any) {
  const fmt = (iso?: string | null) => iso ? fmtTimeISO(iso) : "\u00C3\u0192\u00C6\u2019\u00C3\u2020\u00E2\u20AC\u2122\u00C3\u0192\u00E2\u20AC\u00A0\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2\u00C3\u0192\u00C6\u2019\u00C3\u00A2\u00E2\u201A\u00AC\u00C5\u00A1\u00C3\u0192\u00E2\u20AC\u0161\u00C3\u201A\u00C2\u00A2\u00C3\u0192\u00C6\u2019\u00C3\u2020\u00E2\u20AC\u2122\u00C3\u0192\u00E2\u20AC\u0161\u00C3\u201A\u00C2\u00A2\u00C3\u0192\u00C6\u2019\u00C3\u201A\u00C2\u00A2\u00C3\u0192\u00C2\u00A2\u00C3\u00A2\u00E2\u201A\u00AC\u00C5\u00A1\u00C3\u201A\u00C2\u00AC\u00C3\u0192\u00E2\u20AC\u00A6\u00C3\u201A\u00C2\u00A1\u00C3\u0192\u00C6\u2019\u00C3\u00A2\u00E2\u201A\u00AC\u00C5\u00A1\u00C3\u0192\u00E2\u20AC\u0161\u00C3\u201A\u00C2\u00AC\u00C3\u0192\u00C6\u2019\u00C3\u2020\u00E2\u20AC\u2122\u00C3\u0192\u00E2\u20AC\u0161\u00C3\u201A\u00C2\u00A2\u00C3\u0192\u00C6\u2019\u00C3\u201A\u00C2\u00A2\u00C3\u0192\u00C2\u00A2\u00C3\u00A2\u00E2\u20AC\u0161\u00C2\u00AC\u00C3\u2026\u00C2\u00A1\u00C3\u0192\u00E2\u20AC\u0161\u00C3\u201A\u00C2\u00AC\u00C3\u0192\u00C6\u2019\u00C3\u00A2\u00E2\u201A\u00AC\u00C5\u00A1\u00C3\u0192\u00E2\u20AC\u0161\u00C3\u201A\u00C2\u009D";

  const riskyISO    = result?.bands?.aggressiveLeaveLocalISO ?? result?.leaveByLocalISO ?? null;
  const moderateISO = result?.bands?.normalLeaveLocalISO     ?? result?.leaveByLocalISO ?? null;
  const cautiousISO = result?.bands?.cautiousLeaveLocalISO   ?? result?.leaveByLocalISO ?? null;

  return {
    risky:    { time: fmt(riskyISO),    description: "Tight window; best for light travelers or PreCheck." },
    moderate: { time: fmt(moderateISO), description: "Balanced timing for most travelers." },
    cautious: { time: fmt(cautiousISO), description: "Extra buffer for peace of mind and unexpected delays." },
    _iso: { riskyISO, moderateISO, cautiousISO }
  };
}
function generateAnalysis(result: any) {
  const bd = result?.breakdown ?? {};
  const n = (v: any, d: number) => (typeof v === "number" && isFinite(v) ? v : d);

  // Dynamic defaults based on airport capacity & busyness
  const isIntl = !!(result?.flags?.isInternational ?? result?.isInternational ?? (result?.flightType === "international"));
  const capacity = (result?.meta?.busyness?.capacityTier ?? "medium").toString().toLowerCase();
  const tierMul = capacity === "mega" ? 1.35 : (capacity === "large" ? 1.20 : (capacity === "small" ? 0.90 : 1.00));
  const score = (typeof result?.meta?.busyness?.score === "number") ? result.meta.busyness.score : 0;
  const busyAdd = score >= 60 ? 10 : (score >= 30 ? 5 : 0); // minutes
  const baseCheck = isIntl ? 45 : 30;   // baseline mins
  const baseSec   = isIntl ? 10 : 5;
  const intlImmigrationAdd = isIntl ? ((capacity === "large" || capacity === "mega") ? 10 : 5) : 0;
  const chkDef = Math.round(baseCheck * tierMul + busyAdd + intlImmigrationAdd);
  const secDef = Math.round(baseSec   * tierMul + Math.round(busyAdd / 2));

  // Skip check-in if already checked in and no checked bag
  const checkedIn = !!(result?.flags?.alreadyCheckedIn ?? result?.flags?.checkedIn ?? result?.inputs?.checkedIn);
  const hasBag    = !!(result?.flags?.hasCheckedBag ?? result?.flags?.checkedBag ?? result?.inputs?.hasCheckedBag ?? result?.inputs?.bags);
  const skipCheckIn = !!(checkedIn && !hasBag);
  const checkInEff  = skipCheckIn ? 0 : n((bd as any).checkInMin, chkDef);
  const reasonCheck = skipCheckIn ? "Already checked in and no checked bag." : "Airline counters & baggage drop at this hour.";

  const items = [
    { factor: "Check-in / bag-drop", time: checkInEff, reason: reasonCheck },
    { factor: "Security screening",  time: n((bd as any).securityWaitMin, secDef), reason: (result?.meta?.securityDetail ?? "Typical security wait for this timeslot.") },
    { factor: "Walk to gate",        time: n((bd as any).walkBufferMin, 12), reason: "Distance and terminal layout." },
    { factor: "Contingency",         time: n(((bd as any).contingencyMin ?? result?.meta?.airportMiscBufferMin), 8), reason: "Buffer for minor slowdowns." }
  ];

  const windowMinutes =
    (typeof result?.meta?.busyness?.windowMin === "number")
      ? Math.max(15, Math.min(240, Math.round(result.meta.busyness.windowMin)))
      : (typeof result?.meta?.horizonHours === "number")
        ? Math.max(15, Math.min(240, Math.round(result.meta.horizonHours * 60)))
        : 90;

  const bus = (result?.meta?.busyness ?? result?.meta?.business) as any;
  const count = (typeof bus?.count === "number") ? bus.count : null;

  const activityLevel =
    (typeof bus?.score === "number")
      ? (bus.score >= 60 ? "High" : (bus.score >= 30 ? "Moderate" : "Typical"))
      : "Typical";

  return {
    activityLevel,
    departuresInWindow: count,
    windowMinutes,
    departureContext: (result?.meta?.securityDetail ?? "Based on schedule load and typical patterns."),
    extendedContext: (result?.meta?.securitySource ? ("Source: " + result.meta.securitySource) : null),
    breakdown: items
  };
}


function fmtDateTimeISO(iso?: string | null) {
  if (!iso) return "\u2014";
  const d = new Date(iso);
  if (Number.isNaN(d.getTime())) return "\u2014";
  return new Intl.DateTimeFormat(undefined, {
    weekday: "short", month: "short", day: "numeric",
    hour: "numeric", minute: "2-digit", hour12: true
  }).format(d);
}


function bufferTextFor(_: string | null) {
  return "Includes check-in, security, walk, and contingency.";
}




export default function ResultPage() {
  const sp = useSearchParams();
  const [showRaw, setShowRaw] = useState(false);

  const result = useMemo(() => parseDataParam(sp.get("data")), [sp]);

  const headerISO  = result?.departureLocalISO || result?.departLocalISO || result?.leaveByLocalISO || null;
  const heroISO    = result?.leaveByLocalISO || result?.bands?.aggressiveLeaveLocalISO || result?.arriveByLocalISO || headerISO;
  let timeline   = (result?.timeline as any) || {};
  // --- Fill timeline fields from available data if missing ---
  {
    const bd = (result?.breakdown as any) || {};
    const checkedIn = !!(result?.flags?.alreadyCheckedIn ?? result?.flags?.checkedIn ?? result?.inputs?.checkedIn);
    const hasBag    = !!(result?.flags?.hasCheckedBag ?? result?.flags?.checkedBag ?? result?.inputs?.hasCheckedBag ?? result?.inputs?.bags);
    const skipCheckIn = !!(checkedIn && !hasBag);
    const numCheck = skipCheckIn ? 0 : ((typeof bd.checkInMin === "number" && isFinite(bd.checkInMin)) ? bd.checkInMin : 30);
    const num = (v: any, d: number) => (typeof v === "number" && isFinite(v) ? v : d);
    const addMinISO = (iso?: string | null, min?: number) => {
      if (!iso || typeof min !== "number" || !isFinite(min)) return null;
      const d = new Date(iso); if (Number.isNaN(d.getTime())) return null;
      d.setMinutes(d.getMinutes() + Math.round(min));
      return d.toISOString();
    };
    const totalBack = numCheck + num(bd.securityWaitMin, 5) + num(bd.walkBufferMin, 12) + num(bd.contingencyMin, 8);
    const arriveComp   = (timeline as any).arriveByISO ?? (result as any)?.arriveByLocalISO ?? (result as any)?.arriveAirportLocalISO ?? (depISO ? addMinISO(depISO, -totalBack) : null);
    const checkInComp  = (timeline as any).checkInDoneISO ?? (arriveComp ? addMinISO(arriveComp,   numCheck) : null);
    const securityComp = (timeline as any).securityDoneISO ?? (arriveComp ? addMinISO(arriveComp,   numCheck + num(bd.securityWaitMin, 5)) : null);
    const gateComp     = (timeline as any).gateByISO       ?? (arriveComp ? addMinISO(arriveComp,   numCheck + num(bd.securityWaitMin, 5) + num(bd.walkBufferMin, 12))
                                                              : (depISO ? addMinISO(depISO, -num(bd.walkBufferMin, 12)) : null));
    timeline = { ...timeline,
      arriveByISO:    (timeline as any).arriveByISO    ?? arriveComp,
      checkInDoneISO: (timeline as any).checkInDoneISO ?? checkInComp,
      securityDoneISO:(timeline as any).securityDoneISO?? securityComp,
      gateByISO:      (timeline as any).gateByISO      ?? gateComp,
    };
  }
  let traffic    = (result?.traffic as any) || {};
  // --- Auto-fill traffic when not provided (derive from meta.busyness) ---
  if (!traffic.level) {
    const bus = (result?.meta?.busyness ?? result?.meta?.business) as any;
    if (bus) {
      const score = Number.isFinite(bus?.score) ? Number(bus.score) : 0;
      const level = score >= 60 ? "Heavy" : (score >= 30 ? "Moderate" : (score > 0 ? "Light" : "Typical"));
      const count = (typeof bus?.count === "number") ? bus.count : null;
      const windowMin =
  (typeof bus?.windowMin === "number")
    ? Math.max(15, Math.min(240, Math.round(bus.windowMin)))
    : (typeof result?.meta?.horizonHours === "number")
      ? Math.max(15, Math.min(240, Math.round(result.meta.horizonHours * 60)))
      : 90;
      traffic = { level, reason: `${score}% \u00B7 ${count ?? "\u2014"} deps in \u00B1${windowMin}m` };
    }
  }
  const routeType  = result?.routeType || (result?.explanation?.isInternational ? "International" : "Domestic");
  const overall    = result?.overall || null;
  const confidence = result?.confidence || { level: "Medium" };
  const changed    = result?.changed || null;
  const depISO     = result?.departureLocalISO || null;

  const comfortLevels = useMemo(() => generateComfortLevels(result || {}), [result]);
  const analysis      = useMemo(() => generateAnalysis(result || {}), [result]);
  const buffers       = "Includes check-in, security, walk, and contingency.";

  if (!result) {
    return (
      <main className="app-shell">
        <div className="container">
          <div className="card card-lg">
            <div className="card-inner" style={{ textAlign: "center" }}>
              <h1 suppressHydrationWarning data-hero-title>{fmtTimeISOStable(headerISO) ?? "\u2014"}</h1>
              <p className="sub">Let&apos;s try that again.</p>
              <div className="footer-row" style={{ justifyContent: "center" }}>
                <Link className="btn" href="/">Start over</Link>
              </div>
            </div>
          </div>
        </div>
      </main>
    );
  }

  return (
    <main className="app-shell">
      <div className="container">
        <div className="header">
          <div className="brand">
            <svg width="22" height="22" viewBox="0 0 24 24" fill="none" aria-hidden>
              <path d="M3 12h18M3 12c6-4 12-4 18 0M3 12c6 4 12 4 18 0" stroke="url(#g)" strokeWidth="1.6" strokeLinecap="round"/>
              <defs>
                <linearGradient id="g" x1="3" y1="12" x2="21" y2="12" gradientUnits="userSpaceOnUse">
                  <stop stopColor="#6ee7ff"/><stop offset="1" stopColor="#a78bfa"/>
                </linearGradient>
              </defs>
            </svg>
            <div>depart</div>
          </div>
          <div className="badge">results</div>
        </div>

        <div className="grid">
          <section className="card card-lg">
            <div className="card-inner">
              <div className="kicker">Suggested arrival</div>
              {(result?.airport || result?.departureLocalISO) && (
                <div className="help" style={{ marginTop: 4 }} suppressHydrationWarning>
                  {result?.airport}
                  {result?.airport && result?.departureLocalISO ? " \u00B7 " : ""}
                  {fmtDateTimeISO(result?.departureLocalISO)}
                </div>
              )}

              <div className="time-big" suppressHydrationWarning>{fmtTimeISOStable(heroISO) ?? "\u2014"}</div>
              <p className="help" style={{ marginTop: 8 }} suppressHydrationWarning>{buffers}</p>

              <div className="row" style={{ justifyContent: "space-between", marginTop: 8, flexWrap: "wrap" }}>
                <div className="row" style={{ gap: 8 }}>
                  {overall && <div className="chip" suppressHydrationWarning>Overall: <strong>{overall}</strong></div>}
                  {confidence?.level && <div className="chip" suppressHydrationWarning>Confidence: <strong>{confidence.level}</strong></div>}
                  <div className="chip" suppressHydrationWarning>{routeType} flight</div>
                </div>
                {changed?.minutes ? (
                  <div className={"chip " + (changed.direction === "later" ? "bad" : "good")} suppressHydrationWarning>
                    {changed.direction === "later" ? "Later by" : "Earlier by"} {changed.minutes} min
                  </div>
                ) : null}
              </div>

              <div className="footer-row">
                <button className="btn btn-secondary" onClick={() => setShowRaw(v => !v)}>
                  {showRaw ? "Hide raw output" : "View raw output"}
                </button>
                <Link className="btn" href="/">Plan another flight</Link>
              </div>
            </div>
          </section>

          {/* Comfort Level Cards */}
          {comfortLevels && (
            <section className="grid grid-3">
              <div className="card">
                <div className="card-inner">
                  <div className="kicker" style={{ color: "#ff6b6b" }}>Risky</div>
                  <div className="time-big" suppressHydrationWarning style={{ fontSize: "32px" }}>{comfortLevels.risky.time}</div>
                  <p className="help" style={{ marginTop: 4 }} suppressHydrationWarning>{bufferTextFor(heroISO)}</p>
                  <p className="help" style={{ fontSize: "12px", marginTop: 8 }}>{comfortLevels.risky.description}</p>
                </div>
              </div>
              <div className="card" style={{ border: "2px solid var(--accent)" }}>
                <div className="card-inner">
                  <div className="kicker" style={{ color: "var(--accent)" }}>Moderate</div>
                  <div className="time-big" suppressHydrationWarning style={{ fontSize: "32px" }}>{comfortLevels.moderate.time}</div>
                  <p className="help" style={{ marginTop: 4 }} suppressHydrationWarning>{bufferTextFor(heroISO)}</p>
                  <p className="help" style={{ fontSize: "12px", marginTop: 8 }}>{comfortLevels.moderate.description}</p>
                </div>
              </div>
              <div className="card">
                <div className="card-inner">
                  <div className="kicker" style={{ color: "#51cf66" }}>Cautious</div>
                  <div className="time-big" suppressHydrationWarning style={{ fontSize: "32px" }}>{comfortLevels.cautious.time}</div>
                  <p className="help" style={{ marginTop: 4 }} suppressHydrationWarning>{bufferTextFor(heroISO)}</p>
                  <p className="help" style={{ fontSize: "12px", marginTop: 8 }}>{comfortLevels.cautious.description}</p>
                </div>
              </div>
            </section>
          )}

          {/* Analysis */}
          {analysis && (
            <section className="card">
              <div className="card-inner">
                <div className="kicker">Detailed Analysis</div>
                <h3 style={{ margin: "6px 0 16px", fontSize: "18px" }}>Why This Timing</h3>

                <div style={{
                  background: "rgba(110,231,255,0.1)",
                  border: "1px solid rgba(110,231,255,0.2)",
                  borderRadius: "12px",
                  padding: "16px",
                  marginBottom: "16px"
                }}>
                  <div className="row" style={{ justifyContent: "space-between", alignItems: "flex-start", marginBottom: "8px" }}>
                    <div>
                      <div style={{ color: "var(--accent)", fontWeight: 600, fontSize: "14px" }}>Airport Activity</div>
                      <div style={{ color: "var(--text)", fontWeight: 700, fontSize: "16px" }}>{analysis.activityLevel}</div>
                    </div>
                    {analysis.departuresInWindow !== null && (
                      <div style={{ textAlign: "right" }}>
                        <div style={{ color: "var(--accent)", fontWeight: 600, fontSize: "24px" }}>{analysis.departuresInWindow}</div>
                        <div style={{ color: "var(--muted)", fontSize: "12px" }}>flights in {"\u00B1"}{analysis.windowMinutes} min</div>
                      </div>
                    )}
                  </div>
                  <p className="help" style={{ marginBottom: analysis.extendedContext ? "8px" : "0" }} suppressHydrationWarning>
                    {analysis.departureContext}
                  </p>
                  {analysis.extendedContext && (
                    <p className="help" style={{ fontSize: "12px", color: "var(--accent)", margin: 0 }} suppressHydrationWarning>
                      {analysis.extendedContext}
                    </p>
                  )}
                </div>

                <div className="grid grid-2" style={{ gap: "12px" }}>
                  {analysis.breakdown.map((item: any, i: number) => (
                    <div key={i} style={{
                      background: "rgba(255,255,255,0.04)",
                      border: "1px solid rgba(255,255,255,0.08)",
                      borderRadius: "12px",
                      padding: "14px"
                    }}>
                      <div className="row" style={{ justifyContent: "space-between", marginBottom: "6px" }}>
                        <span style={{ fontWeight: 600, fontSize: "14px" }}>{item.factor}</span>
                        <span style={{ color: "var(--accent)", fontWeight: 600 }}>{item.time} min</span>
                      </div>
                      <p className="help" style={{ fontSize: "12px", margin: 0 }}>{item.reason}</p>
                    </div>
                  ))}
                </div>
              </div>
            </section>
          )}

          <section className="grid grid-2">
            <div className="card">
              <div className="card-inner">
                <div className="kicker">Your flight</div>
                <h3 style={{ margin: "6px 0 10px", fontSize: "18px" }}>Departure</h3>
                <p className="help" suppressHydrationWarning>{traffic?.reason ?? "\u2014"}</p>

                <div className="divider"></div>
                <div className="kicker">Why this time</div>
                <ul style={{ margin: "10px 0", paddingLeft: "18px", color: "var(--muted)" }}>
                  <li>Check-in / bag-drop: <strong suppressHydrationWarning>{analysis.breakdown[0]?.time ?? "\u2014"} min</strong></li>
                  <li>Security screening:  <strong suppressHydrationWarning>{analysis.breakdown[1]?.time ?? "\u2014"} min</strong></li>
                  <li>Walk to gate:        <strong suppressHydrationWarning>{analysis.breakdown[2]?.time ?? "\u2014"} min</strong></li>
                  <li>Contingency:         <strong suppressHydrationWarning>{analysis.breakdown[3]?.time ?? "\u2014"} min</strong></li>
                </ul>
                {result?.explanation?.contingencyReason && (
                  <p className="help" style={{ marginTop: -6 }} suppressHydrationWarning>
                    Why contingency? {result.explanation.contingencyReason}
                  </p>
                )}
                {Array.isArray(result?.explanation?.notes) && result.explanation.notes.length > 0 && (
                  <>
                    <div className="kicker" style={{ marginTop: 12 }}>Notes</div>
                    <ul style={{ margin: "10px 0", paddingLeft: "18px", color: "var(--muted)" }}>
                      {result.explanation.notes.map((n: string, i: number) => <li key={i}>{n}</li>)}
                    </ul>
                  </>
                )}
              </div>
            </div>

            <div className="card">
              <div className="card-inner">
                <div className="kicker">Security & traffic</div>
                <h3 style={{ margin: "6px 0 10px", fontSize: "18px" }}>
                  <span suppressHydrationWarning>{result?.security ?? "\u2014"}</span>
                  <span style={{ opacity: .5 }}>{" \u00B7 "}</span>
                  <span suppressHydrationWarning>Terminal traffic: {traffic?.level ?? "\u2014"}</span>
                </h3>
                <p className="help" suppressHydrationWarning>{traffic?.reason ?? "\u2014"}</p>

                <div className="divider"></div>
                <div className="kicker">Timeline</div>
                <div className="timeline" style={{ marginTop: 8 }}>
                  <div className="item" suppressHydrationWarning><span className="dot"></span> Arrive: <strong suppressHydrationWarning>{fmtTimeISOStable(timeline?.arriveByISO)}</strong></div>
                  <div className="item" suppressHydrationWarning><span className="dot"></span> Check-in done: <strong suppressHydrationWarning>{fmtTimeISOStable(timeline?.checkInDoneISO)}</strong></div>
                  <div className="item" suppressHydrationWarning><span className="dot"></span> Security done: <strong suppressHydrationWarning>{fmtTimeISOStable(timeline?.securityDoneISO)}</strong></div>
                  <div className="item" suppressHydrationWarning><span className="dot"></span> At gate by: <strong suppressHydrationWarning>{fmtTimeISOStable(timeline?.gateByISO)}</strong></div>
                  <div className="item" suppressHydrationWarning><span className="dot"></span> Departure: <strong suppressHydrationWarning>{fmtTimeISOStable(depISO)}</strong></div>
                </div>
              </div>
            </div>
          </section>

          {showRaw && (
            <section className="card">
              <div className="card-inner">
                <div className="kicker">Raw output</div>
                <pre className="code">{JSON.stringify(result, null, 2)}</pre>
              </div>
            </section>
          )}
        </div>
      </div>
    </main>
  );
}















