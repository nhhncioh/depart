'use client';

import "../ui.css";
import Link from "next/link";
import { useSearchParams } from "next/navigation";
import { useMemo, useState } from "react";

function pad2(n:number){ return n < 10 ? "0"+n : ""+n; }
function monthAbbr(m:number){ return ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][m]||""; }
function fmtClock(d: Date){ let h=d.getHours(); const m=pad2(d.getMinutes()); const am=h>=12?"PM":"AM"; h=h%12||12; return `${h}:${m} ${am}`; }
function fmtTimeISO(iso?: string|null){ if(!iso) return "—"; return fmtClock(new Date(iso)); }
function fmtDateTimeISO(iso?: string|null){ if(!iso) return "—"; const d=new Date(iso); return `${monthAbbr(d.getMonth())} ${d.getDate()}, ${d.getFullYear()}, ${fmtClock(d)}`; }
function decodeB64(b64: string){ try { return JSON.parse(decodeURIComponent(escape(atob(b64)))); } catch { return null; } }

function resolveArriveBy(res:any): string | null {
  const cands = [res?.arriveBy, res?.arrivalTime, res?.result?.arriveBy, res?.recommendation?.arriveBy, res?.arrival?.recommendedTime, res?.data?.arriveBy, res?.recommend?.arriveBy].filter(Boolean);
  if(cands.length && typeof cands[0] === "string") return cands[0] as string;
  const m = res?.bufferMinutes ?? res?.arriveByMinutes ?? res?.minutesBeforeDeparture;
  const depISO = res?.departureLocalISO ?? res?.departure ?? res?.flightDateTime;
  if(typeof m === "number" && depISO){ try { const t = new Date(new Date(depISO).getTime() - (m * 60_000)); return fmtClock(t); } catch {} }
  return null;
}
function resolveSecurity(res:any): string {
  const c = res?.securityOutlook || res?.security?.status || res?.queue || res?.wait || res?.congestion;
  if(typeof c === "string") return c;
  if(typeof c === "number") return c + " min est. wait";
  return "Typical";
}
function resolveBuffers(res:any): string {
  if(typeof res?.bufferMinutes === "number") return res.bufferMinutes + " min buffer";
  if(typeof res?.minutesBeforeDeparture === "number") return res.minutesBeforeDeparture + " min before departure";
  return "Includes smart buffer & screening time";
}

// NEW: Generate comfort level variants
function generateComfortLevels(result: any) {
  const baseBufferMinutes = result?.bufferMinutes || 0;
  const depISO = result?.departureLocalISO;
  
  if (!depISO) return null;
  
  const baseArrivalMs = new Date(depISO).getTime() - (baseBufferMinutes * 60_000);
  
  // Adjust buffer times: Risky (-15min), Moderate (baseline), Cautious (+20min)
  const risky = new Date(baseArrivalMs + (15 * 60_000));
  const moderate = new Date(baseArrivalMs);
  const cautious = new Date(baseArrivalMs - (20 * 60_000));
  
  return {
    risky: {
      time: fmtClock(risky),
      buffer: Math.max(0, baseBufferMinutes - 15),
      description: "Minimal buffer, assumes everything goes smoothly"
    },
    moderate: {
      time: fmtClock(moderate),
      buffer: baseBufferMinutes,
      description: "Balanced approach with reasonable safety margin"
    },
    cautious: {
      time: fmtClock(cautious),
      buffer: baseBufferMinutes + 20,
      description: "Extra buffer for peace of mind and unexpected delays"
    }
  };
}

// NEW: Generate detailed analysis
function generateAnalysis(result: any) {
  const components = result?.components || {};
  const explanation = result?.explanation || {};

  const departuresInWindowRaw =
    result?.meta?.departuresInWindow ?? result?.departuresInWindow ?? null;
  const departuresInWindow =
    typeof departuresInWindowRaw === "number" ? departuresInWindowRaw : null;

  const busynessPercent =
    result?.meta?.busynessPercent ?? result?.busynessPercent ?? null;

  const busynessSource = result?.meta?.busynessSource ?? result?.source ?? "estimate";

  let activityLevel = "";
  if (typeof busynessPercent === "number") {
    activityLevel =
      busynessPercent >= 91 ? "Peak" :
      busynessPercent >= 76 ? "Very busy" :
      busynessPercent >= 51 ? "Busy" :
      busynessPercent >= 31 ? "Moderate" :
      busynessPercent >= 16 ? "Light" : "Very light";
  }

  let departureContext = "";
  if (departuresInWindow !== null && departuresInWindow >= 0) {
    departureContext = `${departuresInWindow} other flights departing within ±${windowMinutes} minutes of yours`;
    if (typeof busynessPercent === "number") {
      departureContext += ` (${busynessPercent}% of typical capacity)`;
    }
  } else if (typeof busynessPercent === "number") {
    departureContext = `Airport activity: ${busynessPercent}% of typical capacity`;
  } else {
    departureContext = "Based on typical patterns for this time of day";
  }

  const breakdown = [
    {
      factor: "Check-in/Bag Drop",
      time: components.checkInMinutes || 0,
      reason: explanation.alreadyCheckedIn && !explanation.checkedBag
        ? "Skipped - already checked in with carry-on only"
        : explanation.checkedBag
        ? "Includes bag drop and check-in process"
        : "Basic check-in time (carry-on only)"
    },
    {
      factor: "Security Screening",
      time: components.securityMinutes || 0,
      reason: explanation.hasNexus
        ? "Expedited screening with NEXUS/PreCheck"
        : "Regular security screening based on current conditions"
    },
    {
      factor: "Walk to Gate",
      time: components.toGateMinutes || 0,
      reason: explanation.isInternational
        ? "Extra time for international terminal navigation"
        : "Standard terminal walking time"
    },
    {
      factor: "Contingency Buffer",
      time: components.contingencyMinutes || 0,
      reason: explanation.contingencyReason || "Buffer for unexpected delays"
    }
  ];

  return {
    departureContext,
    busynessSource,
    breakdown,
    departuresInWindow,
    activityLevel,
  };
}

export default function ResultPage(){
  const sp = useSearchParams();
  const [showRaw, setShowRaw] = useState(false);
  const [copiedTime, setCopiedTime] = useState<string | null>(null);

  // Copy to clipboard function
  const copyToClipboard = async (time: string) => {
    try {
      await navigator.clipboard.writeText(time);
      setCopiedTime(time);
      setTimeout(() => setCopiedTime(null), 2000); // Clear after 2 seconds
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  const result = useMemo(()=>{
    const raw = sp.get("data");
    let obj = raw ? decodeB64(raw) : null;
    if(!obj){ try { obj = JSON.parse(sessionStorage.getItem("depart:lastResult") || "null"); } catch {} }
    return obj;
  }, [sp]);

  const arriveBy = useMemo(()=> result ? resolveArriveBy(result) : null, [result]);
  const security = useMemo(()=> result ? resolveSecurity(result) : "—");
  const buffers  = useMemo(()=> result ? resolveBuffers(result) : "—");
  
  // NEW: Generate comfort levels and analysis
  const comfortLevels = useMemo(() => result ? generateComfortLevels(result) : null, [result]);
  const analysis = useMemo(() => result ? generateAnalysis(result) : null, [result]);

  const components  = result?.components || {};
  const explanation = result?.explanation || {};
  const timeline    = result?.timeline || {};
  const traffic     = result?.traffic || {};
  const routeType   = result?.routeType || (explanation?.isInternational ? "International" : "Domestic");
  const overall     = result?.overall || null;
  const confidence  = result?.confidence || null;
  const changed     = result?.changed || null;
  const depISO      = result?.departureLocalISO;

  if(!result){
    return (
      <main className="app-shell">
        <div className="container">
          <div className="card card-lg">
            <div className="card-inner" style={{textAlign:"center"}}>
              <h1>No result found</h1>
              <p className="sub">Let's try that again.</p>
              <div className="footer-row" style={{justifyContent:"center"}}>
                <Link className="btn" href="/">Start over</Link>
              </div>
            </div>
          </div>
        </div>
      </main>
    );
  }

  return (
    <main className="app-shell">
      <div className="container">

        <div className="header">
          <div className="brand">
            <svg width="22" height="22" viewBox="0 0 24 24" fill="none" aria-hidden>
              <path d="M3 12h18M3 12c6-4 12-4 18 0M3 12c6 4 12 4 18 0" stroke="url(#g)" strokeWidth="1.6" strokeLinecap="round"/>
              <defs>
                <linearGradient id="g" x1="3" y1="12" x2="21" y2="12" gradientUnits="userSpaceOnUse">
                  <stop stopColor="#6ee7ff"/><stop offset="1" stopColor="#a78bfa"/>
                </linearGradient>
              </defs>
            </svg>
            <div>depart</div>
          </div>
          <div className="badge">results</div>
        </div>

        <div className="grid">
          <section className="card card-lg">
            <div className="card-inner">
              <div className="kicker">Suggested arrival</div>
              <div className="time-big" suppressHydrationWarning>{arriveBy ?? "See details"}</div>
              <p className="help" style={{marginTop:8}} suppressHydrationWarning>{buffers}</p>

              <div className="row" style={{justifyContent:"space-between", marginTop:8, flexWrap:"wrap"}}>
                <div className="row" style={{gap:8}}>
                  {overall && <div className="chip" suppressHydrationWarning>Overall: <strong>{overall}</strong></div>}
                  {confidence?.level && <div className="chip" suppressHydrationWarning>Confidence: <strong>{confidence.level}</strong></div>}
                  <div className="chip" suppressHydrationWarning>{routeType} flight</div>
                </div>
                {changed?.minutes ? (
                  <div className={"chip " + (changed.direction==='later' ? 'bad' : 'good')} suppressHydrationWarning>
                    {changed.direction==='later' ? 'Later by' : 'Earlier by'} {changed.minutes} min
                  </div>
                ) : null}
              </div>

              <div className="footer-row">
                <button className="btn btn-secondary" onClick={()=> setShowRaw(v=>!v)}>{showRaw ? "Hide raw output" : "View raw output"}</button>
                <Link className="btn" href="/">Plan another flight</Link>
              </div>
            </div>
          </section>

          {/* NEW: Comfort Level Cards */}
          {comfortLevels && (
            <section className="grid grid-3">
              <div className="card">
                <div className="card-inner">
                  <div className="kicker" style={{color: "#ff6b6b"}}>Risky</div>
                  <div className="time-big" style={{fontSize: "32px"}}>{comfortLevels.risky.time}</div>
                  <p className="help" style={{marginTop: 4}}>{comfortLevels.risky.buffer} min buffer</p>
                  <p className="help" style={{fontSize: "12px", marginTop: 8}}>{comfortLevels.risky.description}</p>
                </div>
              </div>
              <div className="card" style={{border: "2px solid var(--accent)"}}>
                <div className="card-inner">
                  <div className="kicker" style={{color: "var(--accent)"}}>Moderate</div>
                  <div className="time-big" style={{fontSize: "32px"}}>{comfortLevels.moderate.time}</div>
                  <p className="help" style={{marginTop: 4}}>{comfortLevels.moderate.buffer} min buffer</p>
                  <p className="help" style={{fontSize: "12px", marginTop: 8}}>{comfortLevels.moderate.description}</p>
                </div>
              </div>
              <div className="card">
                <div className="card-inner">
                  <div className="kicker" style={{color: "#51cf66"}}>Cautious</div>
                  <div className="time-big" style={{fontSize: "32px"}}>{comfortLevels.cautious.time}</div>
                  <p className="help" style={{marginTop: 4}}>{comfortLevels.cautious.buffer} min buffer</p>
                  <p className="help" style={{fontSize: "12px", marginTop: 8}}>{comfortLevels.cautious.description}</p>
                </div>
              </div>
            </section>
          )}

          {/* NEW: Enhanced Detailed Analysis Section */}
          {analysis && (
            <section className="card">
              <div className="card-inner">
                <div className="kicker">Detailed Analysis</div>
                <h3 style={{margin:"6px 0 16px", fontSize:"18px"}}>Why This Timing</h3>
                
                {/* Airport Activity Summary */}
                <div style={{
                  background: "rgba(110,231,255,0.1)", 
                  border: "1px solid rgba(110,231,255,0.2)", 
                  borderRadius: "12px", 
                  padding: "16px",
                  marginBottom: "16px"
                }}>
                  <div className="row" style={{justifyContent: "space-between", alignItems: "flex-start", marginBottom: "8px"}}>
                    <div>
                      <div style={{color: "var(--accent)", fontWeight: 600, fontSize: "14px"}}>Airport Activity</div>
                      <div style={{color: "var(--text)", fontWeight: 700, fontSize: "16px"}}>{analysis.activityLevel}</div>
                    </div>
                    {analysis.departuresInWindow !== null && (
                      <div style={{textAlign: "right"}}>
                        <div style={{color: "var(--accent)", fontWeight: 600, fontSize: "24px"}}>{analysis.departuresInWindow}</div>
                        <div style={{color: "var(--muted)", fontSize: "12px"}}>flights in ±{analysis?.windowMinutes ?? Math.round(((result?.meta?.horizonHours ?? 1.5) * 60))} min</div>
                      </div>
                    )}
                  </div>
                  <p className="help" style={{marginBottom: analysis.extendedContext ? "8px" : "0"}} suppressHydrationWarning>
                    {analysis.departureContext}
                  </p>
                  {analysis.extendedContext && (
                    <p className="help" style={{fontSize: "12px", color: "var(--accent)", margin: 0}} suppressHydrationWarning>
                      {analysis.extendedContext}
                    </p>
                  )}
                </div>
                
                {/* Time Breakdown */}
                <div className="grid grid-2" style={{gap: "12px"}}>
                  {analysis.breakdown.map((item, i) => (
                    <div key={i} style={{
                      background: "rgba(255,255,255,0.04)", 
                      border: "1px solid rgba(255,255,255,0.08)", 
                      borderRadius: "12px", 
                      padding: "14px"
                    }}>
                      <div className="row" style={{justifyContent: "space-between", marginBottom: "6px"}}>
                        <span style={{fontWeight: 600, fontSize: "14px"}}>{item.factor}</span>
                        <span style={{color: "var(--accent)", fontWeight: 600}}>{item.time} min</span>
                      </div>
                      <p className="help" style={{fontSize: "12px", margin: 0}}>{item.reason}</p>
                    </div>
                  ))}
                </div>
              </div>
            </section>
          )}

          <section className="grid grid-2">
            <div className="card">
              <div className="card-inner">
                <div className="kicker">Your flight</div>
                <h3 style={{margin:"6px 0 10px", fontSize:"18px"}}>Departure</h3>
                <p className="help" suppressHydrationWarning>{fmtDateTimeISO(depISO)}</p>

                <div className="divider"></div>
                <div className="kicker">Why this time</div>
                <ul style={{margin:"10px 0", paddingLeft:"18px", color:"var(--muted)"}}>
                  <li>Check-in / bag-drop: <strong suppressHydrationWarning>{components?.checkInMinutes ?? "—"} min</strong></li>
                  <li>Security screening: <strong suppressHydrationWarning>{components?.securityMinutes ?? "—"} min</strong></li>
                  <li>Walk to gate: <strong suppressHydrationWarning>{components?.toGateMinutes ?? "—"} min</strong></li>
                  <li>Contingency: <strong suppressHydrationWarning>{components?.contingencyMinutes ?? "—"} min</strong></li>
                </ul>
                {explanation?.contingencyReason && (
                  <p className="help" style={{marginTop:-6}} suppressHydrationWarning>Why contingency? {explanation.contingencyReason}</p>
                )}
                {Array.isArray(explanation?.notes) && explanation.notes.length>0 && (
                  <>
                    <div className="kicker" style={{marginTop:12}}>Notes</div>
                    <ul style={{margin:"10px 0", paddingLeft:"18px", color:"var(--muted)"}}>
                      {explanation.notes.map((n:string,i:number)=><li key={i}>{n}</li>)}
                    </ul>
                  </>
                )}
              </div>
            </div>

            <div className="card">
              <div className="card-inner">
                <div className="kicker">Security & traffic</div>
                <h3 style={{margin:"6px 0 10px", fontSize:"18px"}}>
                  <span suppressHydrationWarning>{security}</span>
                  <span style={{opacity:.5}}> · </span>
                  <span suppressHydrationWarning>Terminal traffic: {traffic?.level ?? "—"}</span>
                </h3>
                <p className="help" suppressHydrationWarning>{traffic?.reason ?? "Based on typical patterns at this hour."}</p>

                <div className="divider"></div>
                <div className="kicker">Timeline</div>
                <div className="timeline" style={{marginTop:8}}>
                  <div className="item" suppressHydrationWarning><span className="dot"></span> Arrive: <strong>{fmtTimeISO(timeline?.arriveByISO)}</strong></div>
                  <div className="item" suppressHydrationWarning><span className="dot"></span> Check-in done: <strong>{fmtTimeISO(timeline?.checkInDoneISO)}</strong></div>
                  <div className="item" suppressHydrationWarning><span className="dot"></span> Security done: <strong>{fmtTimeISO(timeline?.securityDoneISO)}</strong></div>
                  <div className="item" suppressHydrationWarning><span className="dot"></span> At gate by: <strong>{fmtTimeISO(timeline?.gateByISO)}</strong></div>
                  <div className="item" suppressHydrationWarning><span className="dot"></span> Departure: <strong>{fmtTimeISO(depISO)}</strong></div>
                </div>
              </div>
            </div>
          </section>

          {showRaw && (
            <section className="card">
              <div className="card-inner">
                <div className="kicker">Raw output</div>
                <pre className="code">{JSON.stringify(result, null, 2)}</pre>
              </div>
            </section>
          )}
        </div>
      </div>
    </main>
  );
}

