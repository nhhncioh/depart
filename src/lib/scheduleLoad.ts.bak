import { iataToIcao, capacityTierFor, saturationFor } from "./airports";
import { fetchDayDepartures } from "./aerodatabox";

/**
 * Returns how busy the airport is expected to be, based on scheduled departures
 * near the given local departure time.
 */
export type ScheduleBusyness = {
  departuresInWindow: number | null;   // null = no data
  busynessPercent: number | null;      // null = no data
  note?: string;
};

/** Parse many possible time fields from ADB item and prefer local time if present */
function pickDepartureISO(f: any): string | null {
  // common ADB shapes
  const cand = [
    f?.movement?.scheduledTimeLocal,
    f?.movement?.scheduledTimeUtc,
    f?.departure?.scheduledTimeLocal,
    f?.departure?.scheduledTimeUtc,
    f?.time?.scheduled?.departure?.local,
    f?.time?.scheduled?.departure?.utc,
  ].filter(Boolean);
  return cand.length ? String(cand[0]) : null;
}

function withinMinutes(dtAISO: string, dtBISO: string, windowMin: number): boolean {
  const a = new Date(dtAISO).getTime();
  const b = new Date(dtBISO).getTime();
  if (Number.isNaN(a) || Number.isNaN(b)) return false;
  const diff = Math.abs(a - b) / 60000;
  return diff <= windowMin;
}

/**
 * Compute schedule-based busyness.
 * - Uses day feed to avoid tz/window pitfalls, then filters ±windowMin around depLocalISO.
 * - Returns null when we truly have no schedule data (rate limit, error, unknown shape).
 */
export async function getScheduleBusyness(
  airportIata: string,
  depLocalISO: string,
  windowMin = 90
): Promise<ScheduleBusyness> {
  const icao = iataToIcao(airportIata);
  if (!icao) {
    return { departuresInWindow: null, busynessPercent: null, note: "no ICAO mapping" };
  }

  const isoDate = depLocalISO.slice(0, 10); // YYYY-MM-DD (local)
  const list = await fetchDayDepartures(icao, isoDate);

  if (list === null) {
    return { departuresInWindow: null, busynessPercent: null, note: "no schedule data (API/limit)" };
  }

  // Filter: scheduled departures within ±windowMin of the user's local dep time
  const inWindow = list.filter((f) => {
    const when = pickDepartureISO(f);
    return when ? withinMinutes(when, depLocalISO, windowMin) : false;
  });

  const count = inWindow.length;
  const tier  = capacityTierFor(airportIata);
  const sat   = saturationFor(tier);
  const percent = Math.min(100, Math.round((count / sat) * 100));

  return {
    departuresInWindow: count,
    busynessPercent: percent,
    note: "schedule+load"
  };
}

// For older call sites that import default
export default { getScheduleBusyness };
