/**
 * Aerodatabox (RapidAPI) minimal client
 * Endpoint: /flights/departures/{icao}/{YYYY-MM-DD}
 * Docs: https://rapidapi.com/aedbx-aedbx/api/aerodatabox
 */
export type ADBFlight = any;

async function fetchJson(url: string, headers: Record<string, string>) {
  const res = await fetch(url, { headers, cache: "no-store", next: { revalidate: 60 } });
  const text = await res.text();
  try {
    return { ok: res.ok, status: res.status, body: JSON.parse(text) as any };
  } catch {
    return { ok: res.ok, status: res.status, body: text as any };
  }
}

export async function fetchDayDepartures(icao: string, isoDate: string): Promise<ADBFlight[] | null> {
  // Accept common env var names
  const key =
    process.env.AERODATABOX_RAPIDAPI_KEY ||
    process.env.AERODATABOX_RAPID_KEY ||
    process.env.RAPIDAPI_KEY;

  const host = "aerodatabox.p.rapidapi.com";
  if (!key) {
    console.warn("[ADB] Missing API key: set AERODATABOX_RAPIDAPI_KEY (or RAPIDAPI_KEY)");
    return null;
  }
  if (!icao || !isoDate) {
    console.warn("[ADB] fetchDayDepartures: missing ICAO or date", { icao, isoDate });
    return null;
  }

  // Aerodatabox expects YYYY-MM-DD local date for the airport’s day feed
  const url =
    `https://${host}/flights/departures/${encodeURIComponent(icao)}/${encodeURIComponent(isoDate)}` +
    `?limit=500&withLeg=true&withCodeshared=true&withCancelled=true`;

  const headers = {
    "X-RapidAPI-Key": key,
    "X-RapidAPI-Host": host,
    "Accept": "application/json",
  };

  const out = await fetchJson(url, headers);
  if (!out.ok) {
    console.warn("[ADB] fetch failed", { status: out.status, body: out.body });
    return null;
  }

  const b: any = out.body;
  // Be tolerant about shapes
  if (Array.isArray(b)) return b;
  if (Array.isArray(b?.departures)) return b.departures;
  if (Array.isArray(b?.flights)) return b.flights;
  if (Array.isArray(b?.items)) return b.items;

  console.warn("[ADB] Unrecognized response shape", { keys: b && Object.keys(b) });
  return null;
}
